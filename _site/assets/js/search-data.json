{"0": {
    "doc": "Changelog",
    "title": "CHANGELOG",
    "content": "Todas as alterações importantes serão documentadas nesse arquivo. ",
    "url": "/CHANGELOG/#changelog",
    
    "relUrl": "/CHANGELOG/#changelog"
  },"1": {
    "doc": "Changelog",
    "title": "HEAD",
    "content": "Code changes to main that are not in the latest release: . | Fixed: incorrect navigation when .html omitted from URL by [@pdmosses] in [#1374] | Fixed: incorrect positioning of clickable area for navigation links on Safari by [@mattxwang] in [#1403] | . Docs changes made since the latest release: . | Add documentation to “Navigation Structure” on grouping pages with collections by [@mitchnemirov] in [#1390] | . ",
    "url": "/CHANGELOG/#head",
    
    "relUrl": "/CHANGELOG/#head"
  },"2": {
    "doc": "Changelog",
    "title": "Changelog",
    "content": " ",
    "url": "/CHANGELOG/",
    
    "relUrl": "/CHANGELOG/"
  },"3": {
    "doc": "Migration and Upgrading",
    "title": "Migrating and Upgrading",
    "content": "Summary A site that uses just-the-docs (as a theme or as a remote theme) automatically switches to a new release, unless it is pinned to a previous version. This migration guide draws attention to: . | changes that might break your site, | features added in the latest release, and | features that have become deprecated (and are likely to be removed in a future release). | . This document contains instructions on how to migrate and upgrade Just the Docs sites from every minor or major version bump, starting from v0.3.3 to v0.4.0. | v0.6.x - v0.7.0 . | POTENTIALLY-BREAKING CHANGES in v0.7.0 . | Moved Include | New Script IDs | . | . | v0.5.x - v0.6.0 . | POTENTIALLY-BREAKING CHANGES in v0.6.0 . | New Includes | Removed #main-content-wrap | New $color-scheme variable | Cached favicon | . | . | v0.4.x - v0.5.0 . | POTENTIALLY-BREAKING CHANGES in v0.5.0 | . | v0.3.3 … v0.4.x . | REPOSITORY CHANGES . | Just the Docs | Deploy previews | Just the Docs Template | Just the Docs Tests | . | POTENTIALLY-BREAKING CHANGES in v0.4.0 . | New includes and SCSS | favicons | Custom callout colors | Pages and collections | Relative URLs | Navigation order | . | DEPRECATIONS . | Jekyll 3 | Footer content configuration | . | THEME WEBSITE CHANGES . | Home page | CHANGELOG | . | NON-BREAKING CHANGES (OUTLINE ONLY) . | Accessibility | Configuration | Customization | Custom Includes | Modular Components | Navigation | Search | Styling | . | . | . If your configuration states remote_theme: just-the-docs/just-the-docs, your website is built using the current main branch of the theme, which may include changes made after the latest release; see the CHANGELOG. If your configuration states theme: just_the_docs and your Gemfile specifies gem \"just-the-docs\", your website is always built using the latest release. If you have cloned/forked and customised the theme repo, and pull the changes of a new release to your clone, you may need to resolve merge conflicts. ",
    "url": "/MIGRATION/#migrating-and-upgrading",
    
    "relUrl": "/MIGRATION/#migrating-and-upgrading"
  },"4": {
    "doc": "Migration and Upgrading",
    "title": "v0.6.x - v0.7.0",
    "content": "POTENTIALLY-BREAKING CHANGES in v0.7.0 . There are some very minor potentially-breaking changes for users in version v0.7.0. They do not affect the vast majority of users; however, this may affect users of (undocumented) internal theme structure. They concern: . | the movement of _includes/nav.html, which has moved to _includes/components/nav.html . | explicit migration only necessary if users have overridden _includes/nav.html | . | the addition of &lt;script&gt; tags with ids jtd-nav-activation and jtd-head-nav-stylesheet . | explicit migration only necessary if users have existing elements with those IDs | . | . Moved Include . Version v0.7.0 has moved (and changed the contents of) _includes/nav.html; it is now in _includes/components/nav.html. This means that user overrides for the component will no longer be loaded, reverting to the Just the Docs default. Users who have overridden this _includes should: . | copy in the new upstream _includes/components/nav.html into their site | port over any changes from their custom _includes/nav.html | . No other changes are necessary. New Script IDs . Version v0.7.0 adds the ids jtd-nav-activation and jtd-head-nav-stylesheet to some existing script tags. This will cause errors for users that have their own custom components with those IDs. Users who have elements with those ids should rename their elements to avoid a collision. ",
    "url": "/MIGRATION/#v06x---v070",
    
    "relUrl": "/MIGRATION/#v06x---v070"
  },"5": {
    "doc": "Migration and Upgrading",
    "title": "v0.5.x - v0.6.0",
    "content": "POTENTIALLY-BREAKING CHANGES in v0.6.0 . There are some very minor potentially-breaking changes for users in version v0.6.0. They do not affect the vast majority of users; however, this may affect users of (undocumented) internal theme structure. They concern: . | the addition of new _includes/favicon.html, _includes/head_nav.html, and _includes/css/activation.scss.liquid . | explicit migration only necessary if users have defined a custom file with the same name | . | removing id=\"main-content-wrap from wrapper div elements in default layouts . | explicit migration only necessary if users have written code that depends on #main-content-wrap | . | loading the new $color-scheme variable (from the light scheme by default) . | explicit migration only necessary if users have overridden the base light theme | . | caching the favicon for the entire site . | explicit migration only necessary if users have different favicons for different pages | . | . New Includes . Version v0.6.0 introduces three new _includes files: . | _includes/favicon.html, which now contains logic previously in _includes/head.html: loading favicon.ico if no favicon is specified | _includes/head_nav.html, which generates CSS used for the new efficient navigation implementation | _includes/css/activation.scss.liquid, which is used by head_nav for navigation implementation | . If users have existing _includes files with this name, they should be renamed (and imported with their new name) prior to upgrading to 0.6.0. No other change is necessary. Removed #main-content-wrap . In _layouts/default.html and _layouts/minimal.html, the id=\"main-content-wrap\" has been removed from the wrapper div (in part due to a bug with multiple ids on one element). Internally, our theme does not use these ids; for most users, this does not require any action. However, code that relies on this id must be changed. Each of the related elements still has the unique class .main-content-wrap, and can be selected with this class. For example, in CSS: . /* OLD */ #main-content-wrap { /* ... */ } /* NEW */ .main-content-wrap { /* ... */ } . Or in JS: . // OLD document.getElementById(\"main-content-wrap\"); // NEW document.getElementsByClassName(\"main-content-wrap\")[0]; . New $color-scheme variable . The theme now properly sets the color-scheme property. To do so, the new $color-scheme SCSS variable has been created. The variable has been added to the default light scheme, which is always loaded by Just the Docs. Migration is only needed if: . | the packaged light scheme has been overridden (this is not the same as using a custom scheme) | or, the scheme logic to always load light has been changed | . (neither of these behaviours are recommended by Just the Docs) . In either of these cases, users should add a $color-scheme SCSS variable to their active scheme with the appropriate value (see: MDN docs on color-scheme). $color-scheme: light !default; . Cached favicon . Version v0.6.0 adds a new _include that caches the favicon for the entire site. This significantly improves page build times for large sites. However, some users may load different favicons for each page (and/or dynamically change the first favicon load). In this case, they should override the logic in _includes/favicon.html by replacing it with an empty file (this is different from deleting it). No further migration is necessary. ",
    "url": "/MIGRATION/#v05x---v060",
    
    "relUrl": "/MIGRATION/#v05x---v060"
  },"6": {
    "doc": "Migration and Upgrading",
    "title": "v0.4.x - v0.5.0",
    "content": "POTENTIALLY-BREAKING CHANGES in v0.5.0 . There is one potentially-breaking change for users migrating from v0.4.2 to v0.5.0 concerning setup.scss. To provide context: . | setup.scss was introduced in v0.4.0 | in v0.4.0 and v0.4.1, setup.scss was imported before color scheme SCSS code | in v0.4.2, we adjusted the order to import setup.scss after color scheme SCSS code | in v0.5.0, we have reverted the previous change: setup.scss is now again imported before color scheme SCSS code | . This does not affect most users. Users who did not migrate to v0.4.2 or who do not have a custom setup.scss are guaranteed no breaking changes. Explicit migration steps are only needed if: . | a custom setup.scss has been defined, | and the setup.scss depends on variables or functions defined in color scheme SCSS code; this change was only possible on v0.4.2 | . For those users, we suggest moving those variables and functions to each relevant color scheme. ",
    "url": "/MIGRATION/#v04x---v050",
    
    "relUrl": "/MIGRATION/#v04x---v050"
  },"7": {
    "doc": "Migration and Upgrading",
    "title": "v0.3.3 … v0.4.x",
    "content": "REPOSITORY CHANGES . Just the Docs . The theme repo is now at https://github.com/just-the-docs/just-the-docs. The name of its default branch is now main. The theme docs website is now published at https://just-the-docs.github.io/just-the-docs. We’ve also retroactively published the theme docs website for version v0.3.3 at https://v0-3-3-docs.just-the-docs.com/. GitHub provides access to previous versions of the theme repo. You can browse previous versions of the theme docs website on the Internet Archive. The README page on the theme repo repeats much of the information from the home page, formatted for browsing on GitHub. It also explains how to install the theme as a Ruby Gem, without creating a new site. Deploy previews . When a PR builds successfully, Netlify provides a preview of how the theme docs website will look if the PR is merged. You can find links to the preview near the bottom of the Conversation tab of the PR. Just the Docs Template . The template at https://github.com/just-the-docs/just-the-docs-template creates a repo with the minimal source files for a Just the Docs website. After configuring the relevant parameters, you can build and serve the website both locally and on GitHub Pages – using either Jekyll 3 or Jekyll 4! . Just the Docs Tests . The tests website at https://just-the-docs.github.io/just-the-docs-tests consists mainly of regression tests for bug fixes and new features. The test source files at https://github.com/just-the-docs/just-the-docs-tests illustrate the use of many Markdown and Jekyll features, including some that are not included in the theme docs. For example, see how to add support for rendering TeX/LaTeX math formulas with KaTeX and MathJax. POTENTIALLY-BREAKING CHANGES in v0.4.0 . If switching to a new release of the theme breaks your website, check that you don’t have any files in the _includes, _layouts, and _sass directories with the same names as files provided by the theme. If your repo has a customised copy of _layouts/default.html from a previous release, try removing it, or replace it by a fresh copy of the theme file. The following changes made in v0.4.0 might break or adversely affect your website when you next rebuild it, unless you have pinned it! . New includes and SCSS . Version 0.4.0 introduces many new _includes files. If you already have an existing include with the same name as a new addition, you will need to migrate or update that include. The new files are (relative to the _includes folder): . | mermaid_config.js | nav_footer_custom | search_placeholder_custom | toc_heading_custom | the entire components/ folder: . | aux_nav, breadcrumbs, children_nav, footer, header, mermaid, search_footer, search_header, sidebar | . | the entire icons/ folder . | code_copy, document, expand, external_link, icons, link, menu, search | . | the entire lunr/ folder . | custom-data.json, custom-index.js | . | . We have removed some code in _sass/vendor and added a new file at _sass/custom/setup.scss. favicons . The file _includes/favicon.html is now ignored by the theme. If you’re using it, your website’s favicon is no longer displayed by browsers. To fix: Move the content of _includes/favicon.html to _includes/head_custom.html. Custom callout colors . The file _sass/custom/custom.scss is now imported last: after the configuration of callouts. If you’ve defined custom color variables for callouts in _sass/custom/custom.scss (and used them when configuring your callouts in _config.yml) you will not be able to rebuild your website. To fix: Move custom color variables for callouts in _sass/custom/custom.scss to _sass/custom/variables.scss. Pages and collections . Links to ordinary pages now appear in the navigation on sites that use collections. You might want the navigation of your site to consist entirely of collections. To fix: Add the front matter nav_exclude: true to pages that the navigation should not display. Relative URLs . All generated URLs are now relative. This is a bug fix, and unlikely to break any site. Relative links to pages within a website support deployment to different servers. Navigation order . The order in which the navigation panel lists pages has been simplified. All pages with nav_order values now come before all pages that are ordered by title. If your website has a group of sibling pages where some siblings have nav_order string values, and others are ordered by numerical title values, the former now come before the latter. To fix: Add numerical nav_order values to the pages with numerical title values. DEPRECATIONS . The following features are deprecated, and to be removed in a future release. Jekyll 3 . You can still use Jekyll 3 (3.8.5 or later) to build websites using v0.4.0 of the theme. However, future releases of the theme may require the use of Jekyll 4. You can already use Jekyll 4 to build your website locally. It should look exactly the same as when built with Jekyll 3.1 . To use Jekyll 4 when building your website on GitHub Pages, you need to run GitHub Actions. The simplest way of setting that up in a new repo is to create the repo using the Just the Docs template. To start running Jekyll 4 to build an existing repo on GitHub Pages, you can create a new repo with the template, then copy its .github/workflows directory, and update your repo settings to use Actions. Footer content configuration . Currently, if your configuration sets footer_content to some text, the theme displays that text at the bottom of the main section of each page. The file _includes/footer_custom.html provides a more general way of customizing not only the text but also the markup for the page footer area. You can replicate the current display of TEXT in the footer using the following markup: . &lt;p class=\"text-small text-grey-dk-100 mb-0\"&gt;TEXT&lt;/p&gt; . THEME WEBSITE CHANGES . The website now uses callouts2 to draw attention to important information. The theme uses semantic versioning. A normal version number takes the form X.Y.Z, where X is the major version, Y is the minor version, and Z is the patch version. The theme uses version X.Y.Z.rcN for pre-release N of version X.Y.Z. When referring to version numbers on GitHub, we usually prefix them by ‘v’. Major version zero (0.Y.Z) is for initial development, where anything may change at any time. In practice, we increment the patch version Z for bug fixes and backwards compatible changes; we increment the minor version Y for changes that could break websites using the theme without pinning it to a specific version. The label NEW in the theme website indicates a feature that has been changed or added since the release of the previous minor version. For example, after the release of v0.4.Z, the theme website should label NEW all features that we have changed or added since v0.3.0 – not just since v0.3.3. When we release v0.5.0, we will remove all those labels, and add labels on features since v0.4.0. The theme docs website is not itself versioned. It changes incrementally, independently of theme releases. Home page . The theme home page now focuses on the simplest ways of using the theme. It also notes the different behaviour of theme and remote_theme in connection with interim versions of the theme, such as pre-releases. CHANGELOG . The CHANGELOG page lists the changes made in all previous releases and pre-releases of new versions of the theme gem. It also lists changes made to the main branch of the theme since the latest release or pre-release. For changes since v0.3.3, the log usually references the merged PR that made the change and its author. NON-BREAKING CHANGES (OUTLINE ONLY) . Accessibility . | Skip to main content: the first keyboard-navigatable item is now a link to skip over the sidebar and header to the main content of the page. PR: #949. | Aria-labels: improved aria-labels have been added to various site elements. PRs: #950, … | Other general improvements: gradual changes have improved tab focusability, contrast, and semantic elements. More work still to come. PRs: #498, #846 | . Configuration . | Mermaid support: first-class support for Mermaid - a JavaScript-based diagram and charting tool supported by GitHub - has been added to the theme. This feature is opt-in. See the new doc subsections in Configuration and Code for more. | Multiple Google Analytics tags are now supported. PR: #1029 | . Customization . | all user-facing text is now customizable; previously, several elements (ex search placeholder) were hardwired into the theme. Now, users can blend custom includes and layouts to internationalize their sites. | we’ve clarified the role of custom.scss to be imported last; to allow users to define custom or override variables, we’ve added a new file setup.scss. PR: #1135 | . Custom Includes . We’ve added several custom _includes to provide users with more customization options for different site elements. We’ve also added a section to Configuration to outline these. All of these are opt-in by default; however, these may be breaking if you have existing _includes with the same name. Each item is listed with the relevant file and PR. | TOC heading: toc_heading_custom.html, PR: #980 | Navigation panel footer: nav_footer_custom.html, PR: #474 | Search placeholder: search_placeholder_custom.html, PR: #613 | Modular site components: components/ and icons/, PR: [#1058] | Custom search indices: lunr/, PR: #1068 | . In a future (version 1) release, we may rename the custom include files. Modular Components . We’ve broken up the default layout (_layouts/default.html) into multiple reusable components. This should have no impact on most users; however, it should make it easier to implement custom layouts. For more, see Custom layouts and includes. PR: [#1058]. Navigation . | Collections: nav panel shows links to ordinary pages before collections | Collection folding; part of “Combination”. PR: #578 | Scrolling to show link to selected page. PR: #639 | External nav links are now supported. PR: #876 | Child nav order: sort navigation pages with child_nav_order. PR: #726 | Order when mixing different ways of specifying nav order | . Search . In addition to customizing the search placeholder, we’ve also added the ability to provide custom content to the search index. for more, see Custom content for search index. PR: #1068. Styling . | Code copying: code blocks now allow users to easily copy their contents. PR: #945 | Blockquote: shows vertical bar on left. PR: #965 | Links wrap. PR: #905 | Callouts: a new component similar to alerts or banners. See UI Components - Callouts. PR: #466 | . | Jekyll 4 depends on more recent versions of other gems than Jekyll 3, and the differences between those versions may affect the files of your built site. &#8617; . | The theme website configuration defines the callout titles and colors used there. Websites that use the theme have to configure their own callout titles and colors. &#8617; . | . ",
    "url": "/MIGRATION/#v033--v04x",
    
    "relUrl": "/MIGRATION/#v033--v04x"
  },"8": {
    "doc": "Migration and Upgrading",
    "title": "Migration and Upgrading",
    "content": " ",
    "url": "/MIGRATION/",
    
    "relUrl": "/MIGRATION/"
  },"9": {
    "doc": "Buttons",
    "title": "Buttons",
    "content": " ",
    "url": "/docs/ui-components/buttons/",
    
    "relUrl": "/docs/ui-components/buttons/"
  },"10": {
    "doc": "Buttons",
    "title": "Table of contents",
    "content": ". | Basic button styles . | Links that look like buttons | Button element | . | Using utilities with buttons . | Button size | Spacing between buttons | . | . ",
    "url": "/docs/ui-components/buttons/#table-of-contents",
    
    "relUrl": "/docs/ui-components/buttons/#table-of-contents"
  },"11": {
    "doc": "Buttons",
    "title": "Basic button styles",
    "content": "Links that look like buttons . Link button . Link button Link button Link button . Link button . [Link button](https://just-the-docs.com){: .btn } [Link button](https://just-the-docs.com){: .btn .btn-purple } [Link button](https://just-the-docs.com){: .btn .btn-blue } [Link button](https://just-the-docs.com){: .btn .btn-green } [Link button](https://just-the-docs.com){: .btn .btn-outline } . Button element . GitHub Flavored Markdown does not support the button element, so you’ll have to use inline HTML for this: . Button element &lt;button type=\"button\" name=\"button\" class=\"btn\"&gt;Button element&lt;/button&gt; . ",
    "url": "/docs/ui-components/buttons/#basic-button-styles",
    
    "relUrl": "/docs/ui-components/buttons/#basic-button-styles"
  },"12": {
    "doc": "Buttons",
    "title": "Using utilities with buttons",
    "content": "Button size . Wrap the button in a container that uses the font-size utility classes to scale buttons: . Big ass button . Tiny ass button . &lt;span class=\"fs-8\"&gt; [Link button](https://just-the-docs.com){: .btn } &lt;/span&gt; &lt;span class=\"fs-3\"&gt; [Tiny ass button](https://just-the-docs.com){: .btn } &lt;/span&gt; . Spacing between buttons . Use the margin utility classes to add spacing between two buttons in the same block. Button with space Button . Button with more space Button . [Button with space](https://just-the-docs.com){: .btn .btn-purple .mr-2 } [Button](https://just-the-docs.com){: .btn .btn-blue } [Button with more space](https://just-the-docs.com){: .btn .btn-green .mr-4 } [Button](https://just-the-docs.com){: .btn .btn-blue } . ",
    "url": "/docs/ui-components/buttons/#using-utilities-with-buttons",
    
    "relUrl": "/docs/ui-components/buttons/#using-utilities-with-buttons"
  },"13": {
    "doc": "Callouts",
    "title": "Callouts",
    "content": "New (v0.4.0) . Markdown does not include support for callouts. However, you can style text as a callout using a Markdown extension supported by kramdown: block IALs. Common kinds of callouts include highlight, important, new, note, and warning. These callout names are not pre-defined by the theme: you need to define your own names. When you have configured the color and (optional) title for a callout, you can apply it to a paragraph, or to a block quote with several paragraphs, as illustrated below.1 . An untitled callout . {: .highlight } A paragraph . A paragraph . A single paragraph callout . {: .note } A paragraph . A paragraph . {: .note-title } &gt; My note title &gt; &gt; A paragraph with a custom title callout . My note title . A paragraph with a custom title callout . A multi-paragraph callout . {: .important } &gt; A paragraph &gt; &gt; Another paragraph &gt; &gt; The last paragraph . A paragraph . Another paragraph . The last paragraph . {: .important-title } &gt; My important title &gt; &gt; A paragraph &gt; &gt; Another paragraph &gt; &gt; The last paragraph . My important title . A paragraph . Another paragraph . The last paragraph . An indented callout . &gt; {: .highlight } A paragraph . A paragraph . Indented multi-paragraph callouts . &gt; {: .new } &gt; &gt; A paragraph &gt; &gt; &gt; &gt; Another paragraph &gt; &gt; &gt; &gt; The last paragraph . A paragraph . Another paragraph . The last paragraph . Nested callouts . {: .important } &gt; {: .warning } &gt; A paragraph . A paragraph . Opaque background . {: .important } &gt; {: .opaque } &gt; &lt;div markdown=\"block\"&gt; &gt; {: .warning } &gt; A paragraph &gt; &lt;/div&gt; . A paragraph . | You can put the callout markup either before or after its content. &#8617; . | . ",
    "url": "/docs/ui-components/callouts/",
    
    "relUrl": "/docs/ui-components/callouts/"
  },"14": {
    "doc": "Code",
    "title": "Code",
    "content": " ",
    "url": "/docs/ui-components/code/",
    
    "relUrl": "/docs/ui-components/code/"
  },"15": {
    "doc": "Code",
    "title": "Table of contents",
    "content": ". | Inline code | Syntax highlighted code blocks | Code blocks with rendered examples | Mermaid diagram code blocks . | Using a local mermaid library | Using mermaid with AsciiDoc | . | Copy button | . ",
    "url": "/docs/ui-components/code/#table-of-contents",
    
    "relUrl": "/docs/ui-components/code/#table-of-contents"
  },"16": {
    "doc": "Code",
    "title": "Inline code",
    "content": "Code can be rendered inline by wrapping it in single back ticks. Lorem ipsum dolor sit amet, &lt;inline code snippet&gt; adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ",
    "url": "/docs/ui-components/code/#inline-code",
    
    "relUrl": "/docs/ui-components/code/#inline-code"
  },"17": {
    "doc": "Code",
    "title": "Heading with &lt;inline code snippet&gt; in it.",
    "content": "Lorem ipsum dolor sit amet, `&lt;inline code snippet&gt;` adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ## Heading with `&lt;inline code snippet&gt;` in it. ",
    "url": "/docs/ui-components/code/#heading-with-inline-code-snippet-in-it",
    
    "relUrl": "/docs/ui-components/code/#heading-with-inline-code-snippet-in-it"
  },"18": {
    "doc": "Code",
    "title": "Syntax highlighted code blocks",
    "content": "Use Jekyll’s built-in syntax highlighting with Rouge for code blocks by using three backticks, followed by the language name: . // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } . ```js // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } ``` . Syntax highlighting, line numbers, and HTML compression do not work together; the combination of these features generates invalid HTML that renders incorrectly. To learn more, see “Code with line numbers”. ",
    "url": "/docs/ui-components/code/#syntax-highlighted-code-blocks",
    
    "relUrl": "/docs/ui-components/code/#syntax-highlighted-code-blocks"
  },"19": {
    "doc": "Code",
    "title": "Code blocks with rendered examples",
    "content": "To demonstrate front end code, sometimes it’s useful to show a rendered example of that code. After including the styles from your project that you’ll need to show the rendering, you can use a &lt;div&gt; with the code-example class, followed by the code block syntax. If you want to render your output with Markdown instead of HTML, use the markdown=\"1\" attribute to tell Jekyll that the code you are rendering will be in Markdown format… This is about to get meta… . Link button . [Link button](https://just-the-docs.com){: .btn } . &lt;div class=\"code-example\" markdown=\"1\"&gt; [Link button](https://just-the-docs.com){: .btn } &lt;/div&gt; ```markdown [Link button](https://just-the-docs.com){: .btn } ``` . ",
    "url": "/docs/ui-components/code/#code-blocks-with-rendered-examples",
    
    "relUrl": "/docs/ui-components/code/#code-blocks-with-rendered-examples"
  },"20": {
    "doc": "Code",
    "title": "Mermaid diagram code blocks",
    "content": "New (v0.4.0) . Mermaid allows you to add diagrams and visualizations using Markdown code blocks. It is disabled by default. However, you can turn on support for mermaid by adding a mermaid key to your _config.yml. The minimum configuration requires a version key (matching a version in jsDelivr): . mermaid: # Version of mermaid library # Pick an available version from https://cdn.jsdelivr.net/npm/mermaid/ version: \"9.1.3\" . Additional configuration options are loaded through _includes/mermaid_config.js. By default, the contents of the file are the empty object: . // _includes/mermaid_config.js {} . This loads the default settings. The contents of this object should follow mermaid’s configuration API. For example, to override the theme, change _includes/mermaid_config.js to: . // _includes/mermaid_config.js { theme: \"forest\" } . Once mermaid is installed, it can be used in markdown files. The markdown for a simple flowchart example might look like the following: . ```mermaid graph TD; A--&gt;B; A--&gt;C; B--&gt;D; C--&gt;D; ``` . which renders: . graph TD; A--&gt;B; A--&gt;C; B--&gt;D; C--&gt;D; . Note: for demonstration purposes, we’ve enabled mermaid on this site. It is still disabled by default, and users need to opt-in to use it. Using a local mermaid library . To load a local version of mermaid, also use the path key to specify the location of the library; e.g. mermaid: version: \"10.1.0\" # for (v10+) path: \"/assets/js/mermaid.esm.min.mjs\" # for (&lt;v10): # path: \"/assets/js/mermaid.min.js\" # Note: copy both `mermaid.esm.min.mjs` (v10+) or `mermaid.min.js` (&lt;v10) and the associated # `.map` file from the specified version of `mermaid/dist` to `/assets/js/`. For mermaid versions &gt;=10, this file is imported directly as an ESM module (rather than as a plain &lt;script&gt; tag); users should use the mermaid.esm.min.mjs file. In contrast, for mermaid versions &lt;10, this file is loaded as a script tag; it should be a standalone CJS file (i.e. mermaid.min.js). Mermaid versions 10.0 - 10.1 (and possibly, future releases) still encode relative imports in mermaid.esm.min.mjs. Local users must copy all of the contents of the dist folder to the specified path (preserving the relative location of the files). Just the Docs is actively monitoring mermaid releases; an upstream fix is planned. Using mermaid with AsciiDoc . Users of AsciiDoc (e.g. via jekyll-asciidoc) may need additional configuration to use mermaid. By default, AsciiDoc generates HTML markup that mermaid cannot properly parse. The simplest way to resolve this is to use a passthrough block: . ++++ &lt;pre class=\"language-mermaid\"&gt; graph TD; A--&gt;B; A--&gt;C; B--&gt;D; C--&gt;D; &lt;/pre&gt; ++++ . Alternatively, community member @flyx has contributed a Ruby extension that does not require extra markup. The extension is available as a GitHub Gist. Thank you to @flyx! . The asciidoctor-diagram extension which also supports mermaid is not recommended for use with Just the Docs, since it requires separate configuration e.g. for theming, and is known to not be trivial to set up. ",
    "url": "/docs/ui-components/code/#mermaid-diagram-code-blocks",
    
    "relUrl": "/docs/ui-components/code/#mermaid-diagram-code-blocks"
  },"21": {
    "doc": "Code",
    "title": "Copy button",
    "content": "New (v0.4.0) . The copy button for code blocks can be enabled or disabled via the enable_copy_code_button key in _config.yml. By default, the value of this key is false; users need to opt-in. # For copy button on code enable_copy_code_button: true . Note that this feature requires JavaScript; if JavaScript is disabled in the browser, this feature will not work. In addition, this feature uses navigator.clipboard, which is only available in secure contexts (such as over HTTPS). If the site is viewed in an insecure context, the copy button will not work (relevant issue: #1202). ",
    "url": "/docs/ui-components/code/#copy-button",
    
    "relUrl": "/docs/ui-components/code/#copy-button"
  },"22": {
    "doc": "Color",
    "title": "Color Utilities",
    "content": " ",
    "url": "/docs/utilities/color/#color-utilities",
    
    "relUrl": "/docs/utilities/color/#color-utilities"
  },"23": {
    "doc": "Color",
    "title": "Table of contents",
    "content": ". | Light Greys | Dark Greys | Purples | Blues | Greens | Yellows | Reds | . All the colors used in Just the Docs have been systematized into a series of variables that have been extended to both font color and background color utility classes. ",
    "url": "/docs/utilities/color/#table-of-contents",
    
    "relUrl": "/docs/utilities/color/#table-of-contents"
  },"24": {
    "doc": "Color",
    "title": "Light Greys",
    "content": "| Color value | Font color utility | Background color utility | . | grey-lt-000 | .text-grey-lt-000 | .bg-grey-lt-000 | . | grey-lt-100 | .text-grey-lt-100 | .bg-grey-lt-100 | . | grey-lt-200 | .text-grey-lt-200 | .bg-grey-lt-200 | . | grey-lt-300 | .text-grey-lt-300 | .bg-grey-lt-300 | . ",
    "url": "/docs/utilities/color/#light-greys",
    
    "relUrl": "/docs/utilities/color/#light-greys"
  },"25": {
    "doc": "Color",
    "title": "Dark Greys",
    "content": "| Color value | Font color utility | Background color utility | . | grey-dk-000 | .text-grey-dk-000 | .bg-grey-dk-000 | . | grey-dk-100 | .text-grey-dk-100 | .bg-grey-dk-100 | . | grey-dk-200 | .text-grey-dk-200 | .bg-grey-dk-200 | . | grey-dk-250 | .text-grey-dk-250 | .bg-grey-dk-250 | . | grey-dk-300 | .text-grey-dk-300 | .bg-grey-dk-300 | . ",
    "url": "/docs/utilities/color/#dark-greys",
    
    "relUrl": "/docs/utilities/color/#dark-greys"
  },"26": {
    "doc": "Color",
    "title": "Purples",
    "content": "| Color value | Font color utility | Background color utility | . | purple-000 | .text-purple-000 | .bg-purple-000 | . | purple-100 | .text-purple-100 | .bg-purple-100 | . | purple-200 | .text-purple-200 | .bg-purple-200 | . | purple-300 | .text-purple-300 | .bg-purple-300 | . ",
    "url": "/docs/utilities/color/#purples",
    
    "relUrl": "/docs/utilities/color/#purples"
  },"27": {
    "doc": "Color",
    "title": "Blues",
    "content": "| Color value | Font color utility | Background color utility | . | blue-000 | .text-blue-000 | .bg-blue-000 | . | blue-100 | .text-blue-100 | .bg-blue-100 | . | blue-200 | .text-blue-200 | .bg-blue-200 | . | blue-300 | .text-blue-300 | .bg-blue-300 | . ",
    "url": "/docs/utilities/color/#blues",
    
    "relUrl": "/docs/utilities/color/#blues"
  },"28": {
    "doc": "Color",
    "title": "Greens",
    "content": "| Color value | Font color utility | Background color utility | . | green-000 | .text-green-000 | .bg-green-000 | . | green-100 | .text-green-100 | .bg-green-100 | . | green-200 | .text-green-200 | .bg-green-200 | . | green-300 | .text-green-300 | .bg-green-300 | . ",
    "url": "/docs/utilities/color/#greens",
    
    "relUrl": "/docs/utilities/color/#greens"
  },"29": {
    "doc": "Color",
    "title": "Yellows",
    "content": "| Color value | Font color utility | Background color utility | . | yellow-000 | .text-yellow-000 | .bg-yellow-000 | . | yellow-100 | .text-yellow-100 | .bg-yellow-100 | . | yellow-200 | .text-yellow-200 | .bg-yellow-200 | . | yellow-300 | .text-yellow-300 | .bg-yellow-300 | . ",
    "url": "/docs/utilities/color/#yellows",
    
    "relUrl": "/docs/utilities/color/#yellows"
  },"30": {
    "doc": "Color",
    "title": "Reds",
    "content": "| Color value | Font color utility | Background color utility | . | red-000 | .text-red-000 | .bg-red-000 | . | red-100 | .text-red-100 | .bg-red-100 | . | red-200 | .text-red-200 | .bg-red-200 | . | red-300 | .text-red-300 | .bg-red-300 | . ",
    "url": "/docs/utilities/color/#reds",
    
    "relUrl": "/docs/utilities/color/#reds"
  },"31": {
    "doc": "Color",
    "title": "Color",
    "content": " ",
    "url": "/docs/utilities/color/",
    
    "relUrl": "/docs/utilities/color/"
  },"32": {
    "doc": "Banco de questões",
    "title": "Banco de questões",
    "content": "Projeto: Sistema de Quiz para Questões de Vestibular . Link para o respositório no GitHub . ",
    "url": "/docs/configuration/",
    
    "relUrl": "/docs/configuration/"
  },"33": {
    "doc": "Banco de questões",
    "title": "Funcionalidades:",
    "content": ". | Tem conexão com um banco de dados PostgreSQL contendo as perguntas; | Apresenta perguntas ao usuário e permite a entrada de respostas; | Verifica se a resposta fornecida está correta; | Repete a pergunta até que o usuário acerte; | Exibe uma mensagem de conclusão ao final de todas as perguntas. | . ",
    "url": "/docs/configuration/#funcionalidades",
    
    "relUrl": "/docs/configuration/#funcionalidades"
  },"34": {
    "doc": "Banco de questões",
    "title": "Estrutura:",
    "content": "O projeto é composto por três arquivos principais: . | main.py: O ponto de entrada do programa. | database.py: Define a classe responsável pela conexão e operações com o banco de dados. | questao.py: Define a classe que representa uma questão e sua lógica de verificação de resposta. | . ",
    "url": "/docs/configuration/#estrutura",
    
    "relUrl": "/docs/configuration/#estrutura"
  },"35": {
    "doc": "Banco de questões",
    "title": "Como executar o projeto",
    "content": "Requisitos: . | Python 3.x | PostgreSQL | Biblioteca psycopg2 para Python (instale com “pip install psycopg2” no terminal) | . Configuração do banco de dados: . Será necessário criar um banco de dados PostgreSQL chamado banco_questoes. Dentro desse banco, crie uma tabela chamada questoes com as colunas id, pergunta, e resposta_correta. Insira suas perguntas e respostas no banco de dados. Exemplo de criação da tabela e inserção de dados: . CREATE TABLE questoes ( id SERIAL PRIMARY KEY, pergunta TEXT NOT NULL, resposta_correta TEXT NOT NULL ); INSERT INTO questoes (pergunta, resposta_correta) VALUES ('Qual é a capital do Brasil?', 'Brasília'), ('Quanto é 5 + 7?', '12'), ('Qual é o maior planeta do Sistema Solar?', 'Júpiter'); . Como rodar: . | Certifique-se de que o banco de dados PostgreSQL está rodando. | Execute o script main.py | O sistema então buscará as questões no banco de dados e iniciará o quiz no terminal. | . ",
    "url": "/docs/configuration/#como-executar-o-projeto",
    
    "relUrl": "/docs/configuration/#como-executar-o-projeto"
  },"36": {
    "doc": "Customization",
    "title": "Customization",
    "content": " ",
    "url": "/docs/customization/",
    
    "relUrl": "/docs/customization/"
  },"37": {
    "doc": "Customization",
    "title": "Table of contents",
    "content": ". | Color schemes | Custom schemes . | Define a custom scheme | Use a custom scheme | Switchable custom scheme | . | Override and define new variables | Override and completely custom styles | Override includes . | Custom TOC Heading | Custom Footer | Custom Head | Custom Header | Custom Nav Footer | Custom Search Placeholder | . | Custom layouts and includes . | Default layout and includable components | Alternative layouts and example (minimal) | Default layout and inheritance chain | Overridden default Jekyll layouts | . | . ",
    "url": "/docs/customization/#table-of-contents",
    
    "relUrl": "/docs/customization/#table-of-contents"
  },"38": {
    "doc": "Customization",
    "title": "Color schemes",
    "content": "Just the Docs supports two color schemes: light (default), and dark. To enable a color scheme, set the color_scheme parameter in your site’s _config.yml file: . Example . # Color scheme supports \"light\" (default) and \"dark\" color_scheme: dark . Preview dark color scheme . deprecated: legacy_light . New (v0.4.2) . In Just the Docs version 0.4.2, we changed the default syntax highlighting theme for the light color scheme to have higher contrast. Users who want to use the old highlighting need to explicitly opt-in with the deprecated legacy_light color scheme. In a future major release of Just the Docs, we will remove this color scheme. ",
    "url": "/docs/customization/#color-schemes",
    
    "relUrl": "/docs/customization/#color-schemes"
  },"39": {
    "doc": "Customization",
    "title": "Custom schemes",
    "content": "Define a custom scheme . You can add custom schemes. If you want to add a scheme named foo (can be any name) just add a file _sass/color_schemes/foo.scss (replace foo by your scheme name) where you override theme variables to change colors, fonts, spacing, etc. Since the default color scheme is light, your custom scheme is implicitly based on the variable settings used by the light scheme. If you want your custom scheme to be based on the dark scheme, you need to start your file with the following line: . @import \"./color_schemes/dark\"; . You can define custom schemes based on other custom schemes in the same way. Available variables are listed in the _variables.scss file. For example, to change the link color from the purple default to blue, include the following inside your scheme file: . Example . $link-color: $blue-000; . Keep in mind that changing a variable will not automatically change the value of other variables that depend on it. For example, the default link color ($link-color) is set to $purple-000. However, redefining $purple-000 in a custom color scheme will not automatically change $link-color to match it. Instead, each variable that relies on previously-cascaded values must be manually reimplemented by copying the dependent rules from _variables.scss — in this case, rewriting $link-color: $purple-000;. Note: Editing the variables directly in _sass/support/variables.scss is not recommended and can cause other dependencies to fail. Please use scheme files. Use a custom scheme . To use the custom color scheme, only set the color_scheme parameter in your site’s _config.yml file: . color_scheme: foo . Switchable custom scheme . If you want to be able to change the scheme dynamically, for example via javascript, just add a file assets/css/just-the-docs-foo.scss (replace foo by your scheme name) with the following content: . --- --- {% include css/just-the-docs.scss.liquid color_scheme=\"foo\" %} . This allows you to switch the scheme via the following javascript. jtd.setTheme(\"foo\") . ",
    "url": "/docs/customization/#custom-schemes",
    
    "relUrl": "/docs/customization/#custom-schemes"
  },"40": {
    "doc": "Customization",
    "title": "Override and define new variables",
    "content": "New (v0.4.0) . To define new SCSS variables or functions, place SCSS code in _sass/custom/setup.scss. This should not be used for defining custom styles (see the next section) or overriding color scheme variables (in this case, you should create a new color scheme). This is most commonly-used to define custom callout colors. For example, . // _sass/custom/setup.scss $pink-000: #f77ef1; $pink-100: #f967f1; $pink-200: #e94ee1; $pink-300: #dd2cd4; . In particular: this file is imported after the theme’s variables and functions are defined, but before any CSS classes are emitted. ",
    "url": "/docs/customization/#override-and-define-new-variables",
    
    "relUrl": "/docs/customization/#override-and-define-new-variables"
  },"41": {
    "doc": "Customization",
    "title": "Override and completely custom styles",
    "content": "For styles that aren’t defined as SCSS variables, you may want to modify specific CSS classes. Additionally, you may want to add completely custom CSS specific to your content. To do this, put your styles in the file _sass/custom/custom.scss. This will allow for all overrides to be kept in a single file, and for any upstream changes to still be applied. For example, if you’d like to add your own styles for printing a page, you could add the following styles. Example . // Print-only styles. @media print { .side-bar, .page-header { display: none; } .main-content { max-width: auto; margin: 1em; } } . ",
    "url": "/docs/customization/#override-and-completely-custom-styles",
    
    "relUrl": "/docs/customization/#override-and-completely-custom-styles"
  },"42": {
    "doc": "Customization",
    "title": "Override includes",
    "content": "You can customize the theme by overriding any of the custom Jekyll includes files that it provides. To do this, create an _includes directory and make a copy of the specific file you wish to modify. The content in this file will override the theme defaults. You can learn more about this process in the Jekyll docs for Overriding theme defaults. Just the Docs provides the following custom includes files: . Custom TOC Heading . New (v0.4.0) . _includes/toc_heading_custom.html . If the page has any child pages, and has_toc is not set to false, this content appears as a heading above the auto-generating list of child pages after the page’s content. Example . To change the default TOC heading to “Contents”, create _includes/toc_heading_custom.html and add: . &lt;h2 class=\"text-delta\"&gt;Contents&lt;/h2&gt; . The (optional) text-delta class makes the heading appear as Contents . Custom Footer . _includes/footer_custom.html . This content appears at the bottom of every page’s main content. More info for this include can be found in the Configuration - Footer content. Custom Head . _includes/head_custom.html . Any HTML added to this file will be inserted before the closing &lt;head&gt; tag. This might include additional &lt;meta&gt;, &lt;link&gt;, or &lt;script&gt; tags. The &lt;head&gt; tag automatically includes a link to an existing favicon if you set favicon_ico to the corresponding path in your configuration, or if the path to the favicon is /favicon.ico. Custom Header . _includes/header_custom.html . Content added to this file appears at the top of every page’s main content between the site search and auxiliary links if they are enabled. If search_enabled were set to false and aux_links were removed, the content of header_custom.html would occupy the space at the top of every page. Custom Nav Footer . New (v0.4.0) . _includes/nav_footer_custom.html . Any content added to this file will appear at the bottom left of the page below the site’s navigation. By default an attribution to Just the Docs is displayed which reads, This site uses Just the Docs, a documentation theme for Jekyll.. Custom Search Placeholder . New (v0.4.0) . _includes/search_placeholder_custom.html . Content added to this file will replace the default placeholder text in the search bar (and its aria-label), after stripping HTML and leading/trailing whitespace. By default, the content of the include is: . Search {{site.title}} . Override this file to render a custom placeholder. One common use-case is internationalization; for example, . Chercher notre site . would make the placeholder text “Chercher notre site”. Liquid code (including Jekyll variables) is also supported. ",
    "url": "/docs/customization/#override-includes",
    
    "relUrl": "/docs/customization/#override-includes"
  },"43": {
    "doc": "Customization",
    "title": "Custom layouts and includes",
    "content": "New (v0.4.0) . Advanced . Just the Docs uses Jekyll’s powerful layouts and includes features to generate and compose various elements of the site. Jekyll users and developers can extend or replace existing layouts and includes to customize the entire site layout. Default layout and includable components . The default layout is inherited by most of the “out-of-the-box” pages provided by Just the Docs. It composes various re-usable components of the site, including the sidebar, navbar, footer, breadcrumbs, and various imports. Most users who create new pages or layouts will inherit from default. Here is a simplified code example of what it looks like: . &lt;!-- a simplified version of _layouts/default.html --&gt; &lt;html&gt; {% include head.html %} &lt;body&gt; {% include icons/icons.html %} {% include components/sidebar.html %} {% include components/header.html %} {% include components/breadcrumbs.html %} {% if site.heading_anchors != false %} {% include vendor/anchor_headings.html html=content ... %} {% else %} {{ content }} {% endif %} {% if page.has_children == true and page.has_toc != false %} {% include components/children_nav.html %} {% endif %} {% include components/footer.html %} {% if site.search_enabled != false %} {% include components/search_footer.html %} {% endif %} {% if site.mermaid %} {% include components/mermaid.html %} {% endif %} &lt;/body&gt; &lt;/html&gt; . Component summary . Defining a new _includes with the same name as any of these components will significantly change the existing layout. Please proceed with caution when adjusting them. To briefly summarize each component: . | _includes/head.html is the entire &lt;head&gt; tag for the site; this imports stylesheets, various JavaScript files (ex: analytics, mermaid, search, and Just the Docs code), and SEO / meta information. | _includes/icons/icons.html imports all SVG icons that are used throughout the site. Some, such as those relating to search or code snippet copying, are only loaded when those features are enabled. | _includes/components/sidebar.html renders the sidebar, containing the site header, navigation links, external links, collections, and nav footer. | _includes/components/header.html renders the navigation header, containing the search bar, custom header, and aux links | _includes/components/breadcrumbs.html renders the breadcrumbs feature | vendor/anchor_headings.html is a local copy of Vladimir Jimenez’s jekyll-anchor-headings snippet | _includes/components/children_nav.html renders a list of nav links to child pages on parent pages | _includes/components/footer.html renders the bottom-of-page footer | _includes/components/search_footer.html renders DOM elements that are necessary for the search bar to work | _includes/components/mermaid.html initializes mermaid if the feature is enabled | . Each of these components can be overridden individually using the same process described in the Override includes section. In particular, the granularity of components should allow users to replace certain components (such as the sidebar) without having to adjust the rest of the code. Future versions may subdivide components further; we guarantee that we will only place them in folders (ex components/, icons/, or a new js/) to avoid top-level namespace collisions. Alternative layouts and example (minimal) . Users can develop custom layouts that compose, omit, or add components differently. We provide one first-class example titled minimal, inspired by Kevin Lin’s work in just-the-class. This minimal layout does not render the sidebar, header, or search. To see an example, visit the minimal layout test page. Here is a simplified code example of what it looks like: . &lt;!-- a simplified version of _layouts/minimal.html --&gt; &lt;html&gt; {% include head.html %} &lt;body&gt; {% include icons/icons.html %} {% comment %} Bandaid fix for breadcrumbs here! {% endcomment %} {% include components/breadcrumbs.html %} {% if site.heading_anchors != false %} {% include vendor/anchor_headings.html html=content ... %} {% else %} {{ content }} {% endif %} {% if page.has_children == true and page.has_toc != false %} {% include components/children_nav.html %} {% endif %} {% include components/footer.html %} {% if site.mermaid %} {% include components/mermaid.html %} {% endif %} &lt;/body&gt; &lt;/html&gt; . This layout is packaged in Just the Docs. Users can indicate this alternative layout in page front matter: . --- layout: minimal title: Minimal layout test --- . Similarly, users and developers can create other alternative layouts using Just the Docs’ reusable includable components. Default layout and inheritance chain . Under the hood, . | default and minimal inherit from the table_wrappers layout, which wraps all HTML &lt;table&gt; tags with a div .table-wrapper | table_wrappers inherits from vendor/compress, which is a local copy of Anatol Broder’s jekyll-compress-html Jekyll plugin | . Note that as of now, minimal and default have no inheritance relationship. Overridden default Jekyll layouts . By default, Jekyll (and its default theme minima) provide the about, home, page, and post layouts. In Just the Docs, we override all of these layouts with the default layout. Each of those layouts is simply: . --- layout: default --- {{ content }} . ",
    "url": "/docs/customization/#custom-layouts-and-includes",
    
    "relUrl": "/docs/customization/#custom-layouts-and-includes"
  },"44": {
    "doc": "Default layout child page",
    "title": "Default layout child page",
    "content": "This is a child page that uses the same minimal layout as its parent page. ",
    "url": "/docs/layout/minimal/default-child/",
    
    "relUrl": "/docs/layout/minimal/default-child/"
  },"45": {
    "doc": "Markdown kitchen sink",
    "title": "Header 1",
    "content": "This is a normal paragraph following a header. GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. ",
    "url": "/docs/index-test/#header-1",
    
    "relUrl": "/docs/index-test/#header-1"
  },"46": {
    "doc": "Markdown kitchen sink",
    "title": "Header 2",
    "content": "This is a blockquote following a header. When something is important enough, you do it even if the odds are not in your favor. Header 3 . // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } . # Ruby code with syntax highlighting GitHubPages::Dependencies.gems.each do |gem, version| s.add_dependency(gem, \"= #{version}\") end . Header 4 with code not transformed . | This is an unordered list following a header. | This is an unordered list following a header. | This is an unordered list following a header. | . Header 5 . | This is an ordered list following a header. | This is an ordered list following a header. | This is an ordered list following a header. | . Header 6 . This is a very long link which wraps and therefore doesn’t overflow even when it comes at the beginning of the line. | This is a very long link which wraps and therefore doesn’t overflow the line when used first in an item in a list. | . | head1 | head two | three | . | ok | good swedish fish | nice | . | out of stock | good and plenty | nice | . | ok | good oreos | hmm | . | ok | good zoute drop | yumm | . There’s a horizontal rule below this. Here is an unordered list: . | Item foo | Item bar | Item baz | Item zip | . And an ordered list: . | Item one | Item two | Item three | Item four | . And an ordered list, continued: . | Item one | Item two | . Some text . | Item three | Item four | . And an ordered list starting from 42: . | Item 42 | Item 43 | Item 44 | . And a nested list: . | level 1 item . | level 2 item | level 2 item . | level 3 item | level 3 item | . | . | level 1 item . | level 2 item | level 2 item | level 2 item | . | level 1 item . | level 2 item | level 2 item | . | level 1 item | . Nesting an ol in ul in an ol . | level 1 item (ul) . | level 2 item (ol) | level 2 item (ol) . | level 3 item (ul) | level 3 item (ul) | . | . | level 1 item (ul) . | level 2 item (ol) | level 2 item (ol) . | level 3 item (ul) | level 3 item (ul) | . | level 4 item (ol) | level 4 item (ol) . | level 3 item (ul) | level 3 item (ul) | . | . | level 1 item (ul) | . And a task list . | Hello, this is a TODO item | Hello, this is another TODO item | Goodbye, this item is done | . Nesting task lists . | level 1 item (task) . | level 2 item (task) | level 2 item (task) | . | level 1 item (task) | level 1 item (task) | . Nesting a ul in a task list . | level 1 item (task) . | level 2 item (ul) | level 2 item (ul) | . | level 1 item (task) | level 1 item (task) | . Nesting a task list in a ul . | level 1 item (ul) . | level 2 item (task) | level 2 item (task) | . | level 1 item (ul) | level 1 item (ul) | . Small image . Large image . “Wroclaw University Library digitizing rare archival texts” by j_cadmus is marked with CC BY 2.0. Labels . I’m a label . blue . green . purple . yellow . red . bold . italic . bold + italic . Definition lists can be used with HTML syntax. Name Godzilla Born 1952 Birthplace Japan Color Green Multiple description terms and values . Term Brief description of Term Longer Term Longer description of Term, possibly more than one line Term First description of Term, possibly more than one line Second description of Term, possibly more than one line . Term1 Term2 Single description of Term1 and Term2, possibly more than one line Term1 Term2 First description of Term1 and Term2, possibly more than one line Second description of Term1 and Term2, possibly more than one line . More code . def dump_args(func): \"This decorator dumps out the arguments passed to a function before calling it\" argnames = func.func_code.co_varnames[:func.func_code.co_argcount] fname = func.func_name def echo_func(*args,**kwargs): print fname, \":\", ', '.join( '%s=%r' % entry for entry in zip(argnames,args) + kwargs.items()) return func(*args, **kwargs) return echo_func @dump_args def f1(a,b,c): print a + b + c f1(1, 2, 3) def precondition(precondition, use_conditions=DEFAULT_ON): return conditions(precondition, None, use_conditions) def postcondition(postcondition, use_conditions=DEFAULT_ON): return conditions(None, postcondition, use_conditions) class conditions(object): __slots__ = ('__precondition', '__postcondition') def __init__(self, pre, post, use_conditions=DEFAULT_ON): if not use_conditions: pre, post = None, None self.__precondition = pre self.__postcondition = post . Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Mermaid Diagrams . The following code is displayed as a diagram only when a mermaid key supplied in _config.yml. graph TD; A--&gt;B; A--&gt;C; B--&gt;D; C--&gt;D; . Collapsed Section . The following uses the &lt;details&gt; tag to create a collapsed section. Shopping list (click me!) This is content inside a &lt;details&gt; dropdown. | Apples | Oranges | Milk | . ",
    "url": "/docs/index-test/#header-2",
    
    "relUrl": "/docs/index-test/#header-2"
  },"47": {
    "doc": "Markdown kitchen sink",
    "title": "Markdown kitchen sink",
    "content": "Preview dark color scheme . Text can be bold, italic, or strikethrough. Link to another page. There should be whitespace between paragraphs. There should be whitespace between paragraphs. We recommend including a README, or a file with information about your project. ",
    "url": "/docs/index-test/",
    
    "relUrl": "/docs/index-test/"
  },"48": {
    "doc": "Home",
    "title": "Minha experiência profissional",
    "content": "Desenvolvedor em início de carreira com foco em Python e tecnologias web . Possuo sólidos conhecimentos em Python, com experiência em programação orientada a objetos e manipulação de bancos de dados utilizando PostgreSQL. Tenho familiaridade com JavaScript e já trabalhei com React e Next.js em projetos web. Busco oportunidades para expandir meu conhecimento e aplicar minhas habilidades em ambientes dinâmicos e desafiadores. Sobre mim . ",
    "url": "/#minha-experi%C3%AAncia-profissional",
    
    "relUrl": "/#minha-experiência-profissional"
  },"49": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/",
    
    "relUrl": "/"
  },"50": {
    "doc": "Labels",
    "title": "Labels",
    "content": "Use labels as a way to add an additional mark to a section of your docs. Labels come in a few colors. By default, labels will be blue. Default label . Blue label . Stable . New release . Coming soon . Deprecated . Default label {: .label } Blue label {: .label .label-blue } Stable {: .label .label-green } New release {: .label .label-purple } Coming soon {: .label .label-yellow } Deprecated {: .label .label-red } . ",
    "url": "/docs/ui-components/labels/",
    
    "relUrl": "/docs/ui-components/labels/"
  },"51": {
    "doc": "Layout",
    "title": "Layout Utilities",
    "content": " ",
    "url": "/docs/utilities/layout/#layout-utilities",
    
    "relUrl": "/docs/utilities/layout/#layout-utilities"
  },"52": {
    "doc": "Layout",
    "title": "Table of contents",
    "content": ". | Spacing | Horizontal Alignment | Vertical Alignment | Display | . ",
    "url": "/docs/utilities/layout/#table-of-contents",
    
    "relUrl": "/docs/utilities/layout/#table-of-contents"
  },"53": {
    "doc": "Layout",
    "title": "Spacing",
    "content": "These spacers are available to use for margins and padding with responsive utility classes. Combine these prefixes with a screen size and spacing scale to use them responsively. | Classname prefix | What it does | . | .m- | margin | . | .mx- | margin-left, margin-right | . | .my- | margin top, margin bottom | . | .mt- | margin-top | . | .mr- | margin-right | . | .mb- | margin-bottom | . | .ml- | margin-left | . | Classname prefix | What it does | . | .p- | padding | . | .px- | padding-left, padding-right | . | .py- | padding top, padding bottom | . | .pt- | padding-top | . | .pr- | padding-right | . | .pb- | padding-bottom | . | .pl- | padding-left | . Spacing values are based on a 1rem = 16px spacing scale, broken down into these units: . | Spacer/suffix | Size in rems | Rem converted to px | . | 1 | 0.25rem | 4px | . | 2 | 0.5rem | 8px | . | 3 | 0.75rem | 12px | . | 4 | 1rem | 16px | . | 5 | 1.5rem | 24px | . | 6 | 2rem | 32px | . | 7 | 2.5rem | 40px | . | 8 | 3rem | 48px | . | auto | auto | auto | . Use mx-auto to horizontally center elements. Examples . In Markdown, use the {: } wrapper to apply custom classes: . This paragraph will have a margin bottom of 1rem/16px on large screens. {: .mb-lg-4 } This paragraph will have 2rem/32px of padding on the right and left at all screen sizes. {: .px-6 } . ",
    "url": "/docs/utilities/layout/#spacing",
    
    "relUrl": "/docs/utilities/layout/#spacing"
  },"54": {
    "doc": "Layout",
    "title": "Horizontal Alignment",
    "content": "| Classname | What it does | . | .float-left | float: left | . | .float-right | float: right | . | .flex-justify-start | justify-content: flex-start | . | .flex-justify-end | justify-content: flex-end | . | .flex-justify-between | justify-content: space-between | . | .flex-justify-around | justify-content: space-around | . Note: any of the flex- classes must be used on a parent element that has d-flex applied to it. ",
    "url": "/docs/utilities/layout/#horizontal-alignment",
    
    "relUrl": "/docs/utilities/layout/#horizontal-alignment"
  },"55": {
    "doc": "Layout",
    "title": "Vertical Alignment",
    "content": "| Classname | What it does | . | .v-align-baseline | vertical-align: baseline | . | .v-align-bottom | vertical-align: bottom | . | .v-align-middle | vertical-align: middle | . | .v-align-text-bottom | vertical-align: text-bottom | . | .v-align-text-top | vertical-align: text-top | . | .v-align-top | vertical-align: top | . ",
    "url": "/docs/utilities/layout/#vertical-alignment",
    
    "relUrl": "/docs/utilities/layout/#vertical-alignment"
  },"56": {
    "doc": "Layout",
    "title": "Display",
    "content": "Display classes aid in adapting the layout of the elements on a page: . | Class |   | . | .d-block | display: block | . | .d-flex | display: flex | . | .d-inline | display: inline | . | .d-inline-block | display: inline-block | . | .d-none | display: none | . Use these classes in conjunction with the responsive modifiers. Examples . In Markdown, use the {: } wrapper to apply custom classes: . This button will be hidden until medium screen sizes: [ A button ](#url) {: .d-none .d-md-inline-block } These headings will be `inline-block`: ### heading 3 {: .d-inline-block } ### heading 3 {: .d-inline-block } . ",
    "url": "/docs/utilities/layout/#display",
    
    "relUrl": "/docs/utilities/layout/#display"
  },"57": {
    "doc": "Layout",
    "title": "Layout",
    "content": " ",
    "url": "/docs/utilities/layout/",
    
    "relUrl": "/docs/utilities/layout/"
  },"58": {
    "doc": "Layout",
    "title": "Layout",
    "content": "You specify the layout for a page in its front matter. Just the Docs has a default layout with a sidebar, used for almost all pages in the theme docs, and a minimal layout that omits the sidebar. ",
    "url": "/docs/layout/layout/",
    
    "relUrl": "/docs/layout/layout/"
  },"59": {
    "doc": "Layout",
    "title": "The layout concept",
    "content": "See the Jekyll docs page about layouts for an explanation of the general idea of layouts and how to specify them. You can use Jekyll’s front matter defaults to specify the same layout for many pages. ",
    "url": "/docs/layout/layout/#the-layout-concept",
    
    "relUrl": "/docs/layout/layout/#the-layout-concept"
  },"60": {
    "doc": "Layout",
    "title": "The default layout",
    "content": "This page uses the default layout. It is a responsive layout: on medium and larger width displays, it displays a sidebar, including a navigation panel; on smaller width displays, the sidebar is automatically hidden under a button. Each child (and grandchild) page of a top-level page has so-called breadcrumbs: links to its parent (and grandparent) pages. It shows the breadcrumbs above the main content of the page. Each page that has child pages generally has a list of links to those pages (you can suppress it by has_toc: false in the front matter). It shows the list as a table of contents below the main content. ",
    "url": "/docs/layout/layout/#the-default-layout",
    
    "relUrl": "/docs/layout/layout/#the-default-layout"
  },"61": {
    "doc": "Layout",
    "title": "The minimal layout",
    "content": "A child and grandchild page of this page use the minimal layout. This differs from the default layout by omitting the sidebar – and thereby also the navigation panel. To navigate between pages with the minimal layout, you can use the breadcrumbs and the tables of contents. ",
    "url": "/docs/layout/layout/#the-minimal-layout",
    
    "relUrl": "/docs/layout/layout/#the-minimal-layout"
  },"62": {
    "doc": "Layout",
    "title": "Other layouts",
    "content": "Just the Docs has further layouts: about, home, page, and post. Currently, they are all based on the default layout. See the Jekyll docs about inheritance for how to customize them. ",
    "url": "/docs/layout/layout/#other-layouts",
    
    "relUrl": "/docs/layout/layout/#other-layouts"
  },"63": {
    "doc": "Code with line numbers",
    "title": "Code snippets with line numbers",
    "content": "In prior versions of the docs, we provided “workarounds” to rendering issues arising from code snippets with line numbers. While these seemed to resolve visual layout issues, they did not resolve core issues with Jekyll generating invalid HTML. See the detailed explanation for more information. The default settings for HTML compression are incompatible with the HTML produced by Jekyll for line numbers from highlighted code – both when using Kramdown code fences and when using Liquid highlight tags. To avoid non-conforming HTML and unsatisfactory layout, HTML compression can be turned off by using the following configuration option: . compress_html: ignore: envs: all . When using Kramdown code fences, line numbers are turned on globally by the following configuration option: . kramdown: syntax_highlighter_opts: block: line_numbers: true . Line numbers can then be suppressed locally using Liquid tags (without the linenos option) instead of fences: . {% highlight some_language %} Some code {% endhighlight %} . ",
    "url": "/docs/ui-components/code/line-numbers/#code-snippets-with-line-numbers",
    
    "relUrl": "/docs/ui-components/code/line-numbers/#code-snippets-with-line-numbers"
  },"64": {
    "doc": "Code with line numbers",
    "title": "Detailed Error Explanation",
    "content": "Consider this following code snippet, intended to highlight a simple Ruby program: . {% highlight ruby linenos %} def foo puts 'foo' end {% endhighlight %} . If this is directly placed within a file processed by Jekyll (via Just the Docs, with HTML compression enabled), the following markup will be generated: . &lt;figure class=\"highlight\"&gt;&gt;&lt;code class=\"language-ruby\" data-lang=\"ruby\"&gt;&lt;div class=\"table-wrapper\"&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1 2 3 &lt;/pre&gt;&lt;td class=\"code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;def&lt;/span&gt; &lt;span class=\"nf\"&gt;foo&lt;/span&gt; &lt;span class=\"nb\"&gt;puts&lt;/span&gt; &lt;span class=\"s1\"&gt;'foo'&lt;/span&gt; &lt;span class=\"k\"&gt;end&lt;/span&gt; &lt;/pre&gt;&lt;/figure&gt; . This HTML is invalid; in particular, there are two issues: . | there are many missing closing tags, and a superfluous &gt;, which produce visually garbled output | a &lt;table&gt; is placed within a &lt;code&gt; element, which is syntactically invalid HTML (but is often allowed by browsers) | . To emphasize this first difference, here is the same markup output, indented by tag: . &lt;figure class=\"highlight\"&gt; &gt; &lt;code class=\"language-ruby\" data-lang=\"ruby\"&gt; &lt;div class=\"table-wrapper\"&gt; &lt;table class=\"rouge-table\"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class=\"gutter gl\"&gt; &lt;pre class=\"lineno\"&gt; 1 2 3 &lt;/pre&gt; &lt;td class=\"code\"&gt; &lt;pre&gt; &lt;span class=\"k\"&gt;def&lt;/span&gt; &lt;span class=\"nf\"&gt;foo&lt;/span&gt; &lt;span class=\"nb\"&gt;puts&lt;/span&gt; &lt;span class=\"s1\"&gt;'foo'&lt;/span&gt; &lt;span class=\"k\"&gt;end&lt;/span&gt; &lt;/pre&gt; &lt;/figure&gt; . In order, there are missing &lt;/td&gt;, &lt;/td&gt;, &lt;/tr&gt;, &lt;/tbody&gt;, &lt;/table&gt;, &lt;/div&gt;, and &lt;/code&gt; tags. As a result, the following elements of the page - including the site footer - become visually garbled as browsers attempt to recover gracefully. Prior workarounds we suggested (such as Dmitry Hrabrov’s in jekyll-compress-html#71) resolve the missing tag problem. However, they still place a &lt;table&gt; within a &lt;code&gt; element. The HTML spec normatively states that &lt;code&gt; elements should only contain “phrasing content”, which does not include &lt;table&gt; (spec ref). To avoid incorrectly rendered HTML, the previously-suggested workaround using the current version of _includes/fix_linenos.html should not be used! . ",
    "url": "/docs/ui-components/code/line-numbers/#detailed-error-explanation",
    
    "relUrl": "/docs/ui-components/code/line-numbers/#detailed-error-explanation"
  },"65": {
    "doc": "Code with line numbers",
    "title": "Code with line numbers",
    "content": " ",
    "url": "/docs/ui-components/code/line-numbers/",
    
    "relUrl": "/docs/ui-components/code/line-numbers/"
  },"66": {
    "doc": "Lists",
    "title": "Lists",
    "content": " ",
    "url": "/docs/ui-components/lists/",
    
    "relUrl": "/docs/ui-components/lists/"
  },"67": {
    "doc": "Lists",
    "title": "Table of contents",
    "content": ". | Unordered list | Ordered list | Task list | Definition list | . Most lists can be rendered with pure Markdown. ",
    "url": "/docs/ui-components/lists/#table-of-contents",
    
    "relUrl": "/docs/ui-components/lists/#table-of-contents"
  },"68": {
    "doc": "Lists",
    "title": "Unordered list",
    "content": ". | Item 1 | Item 2 | Item 3 | . or . | Item 1 | Item 2 | Item 3 | . - Item 1 - Item 2 - Item 3 _or_ * Item 1 * Item 2 * Item 3 . ",
    "url": "/docs/ui-components/lists/#unordered-list",
    
    "relUrl": "/docs/ui-components/lists/#unordered-list"
  },"69": {
    "doc": "Lists",
    "title": "Ordered list",
    "content": ". | Item 1 | Item 2 | Item 3 | . 1. Item 1 1. Item 2 1. Item 3 . ",
    "url": "/docs/ui-components/lists/#ordered-list",
    
    "relUrl": "/docs/ui-components/lists/#ordered-list"
  },"70": {
    "doc": "Lists",
    "title": "Task list",
    "content": ". | hello, this is a todo item | hello, this is another todo item | goodbye, this item is done | . - [ ] hello, this is a todo item - [ ] hello, this is another todo item - [x] goodbye, this item is done . ",
    "url": "/docs/ui-components/lists/#task-list",
    
    "relUrl": "/docs/ui-components/lists/#task-list"
  },"71": {
    "doc": "Lists",
    "title": "Definition list",
    "content": "Definition lists require HTML syntax and aren’t supported with the GitHub Flavored Markdown compiler. Name Godzilla Born 1952 Birthplace Japan Color Green &lt;dl&gt; &lt;dt&gt;Name&lt;/dt&gt; &lt;dd&gt;Godzilla&lt;/dd&gt; &lt;dt&gt;Born&lt;/dt&gt; &lt;dd&gt;1952&lt;/dd&gt; &lt;dt&gt;Birthplace&lt;/dt&gt; &lt;dd&gt;Japan&lt;/dd&gt; &lt;dt&gt;Color&lt;/dt&gt; &lt;dd&gt;Green&lt;/dd&gt; &lt;/dl&gt; . ",
    "url": "/docs/ui-components/lists/#definition-list",
    
    "relUrl": "/docs/ui-components/lists/#definition-list"
  },"72": {
    "doc": "Minimal layout child page",
    "title": "Minimal layout child page",
    "content": "This is a child page that uses the same minimal layout as its parent page. ",
    "url": "/docs/layout/minimal/minimal-child/",
    
    "relUrl": "/docs/layout/minimal/minimal-child/"
  },"73": {
    "doc": "Minimal layout test",
    "title": "Minimal layout test",
    "content": "Return to main website. This page demonstrates the packaged minimal layout, which does not render the sidebar or header. It can be used for standalone pages. It is also an example of using the new modular site components to define custom layouts; see “Custom layouts and includes” in the customization docs for more information. ",
    "url": "/docs/minimal-test/",
    
    "relUrl": "/docs/minimal-test/"
  },"74": {
    "doc": "A minimal layout page",
    "title": "A minimal layout page",
    "content": "This page illustrates the built-in layout minimal. One of its child pages also uses the minimal layout; the other child pages uses the default layout. ",
    "url": "/docs/layout/minimal/minimal/",
    
    "relUrl": "/docs/layout/minimal/minimal/"
  },"75": {
    "doc": "Navigation Structure",
    "title": "Navigation Structure",
    "content": ". | Main navigation | Ordering pages | Excluding pages | Pages with children . | Child pages | Ordering child pages | Auto-generating Table of Contents | Children with children | . | Grouping pages with collections | Auxiliary Links | External Navigation Links . | Opening external links in a new tab | . | In-page navigation with Table of Contents . | Collapsible Table of Contents | . | . ",
    "url": "/docs/navigation-structure/",
    
    "relUrl": "/docs/navigation-structure/"
  },"76": {
    "doc": "Navigation Structure",
    "title": "Main navigation",
    "content": "The main navigation for your Just the Docs site is on the left side of the page on large screens and on the top (behind a tap) on small screens. The main navigation can be structured to accommodate a multi-level menu system (pages with children and grandchildren). By default, all pages will appear as top level pages in the main nav unless a parent page is defined (see Pages with Children). ",
    "url": "/docs/navigation-structure/#main-navigation",
    
    "relUrl": "/docs/navigation-structure/#main-navigation"
  },"77": {
    "doc": "Navigation Structure",
    "title": "Ordering pages",
    "content": "To specify a page order, you can use the nav_order parameter in your pages’ YAML front matter. Example (ordering pages) . --- layout: default title: Customization nav_order: 4 --- . The parameter values determine the order of the top-level pages, and of child pages with the same parent. You can reuse the same parameter values (e.g., integers starting from 1) for the child pages of different parents. The parameter values can be numbers (integers, floats) and/or strings. Pages with numerical nav_order parameters always come before those with string nav_order parameters. When you omit nav_order parameters, they default to the titles of the pages. If you want to make the page order independent of the page titles, you can set explicit nav_order parameters on all pages. All pages with explicit nav_order parameters come before all pages ordered by their title values. By default, all Capital letters come before all lowercase letters; you can add nav_sort: case_insensitive in the configuration file to ignore the case. Enclosing strings in (single or double) quotation marks is optional. Numeric values are not enclosed in quotation marks, e.g., 42, -1.0; numbers in quotation marks are lexicographically ordered, so \"10\" comes before \"2\", for example. ",
    "url": "/docs/navigation-structure/#ordering-pages",
    
    "relUrl": "/docs/navigation-structure/#ordering-pages"
  },"78": {
    "doc": "Navigation Structure",
    "title": "Excluding pages",
    "content": "For specific pages that you do not wish to include in the main navigation, e.g. a 404 page or a landing page, use the nav_exclude: true parameter in the YAML front matter for that page. Example (excluding pages) . --- layout: default title: 404 nav_exclude: true --- . The nav_exclude parameter does not affect the auto-generating list of child pages, which you can use to access pages excluded from the main navigation. Pages with no title are automatically excluded from the main navigation. ",
    "url": "/docs/navigation-structure/#excluding-pages",
    
    "relUrl": "/docs/navigation-structure/#excluding-pages"
  },"79": {
    "doc": "Navigation Structure",
    "title": "Pages with children",
    "content": "Sometimes you will want to create a page with many children (a section). First, it is recommended that you keep pages that are related in a directory together… For example, in these docs, we keep all of the written documentation in the ./docs directory and each of the sections in subdirectories like ./docs/ui-components and ./docs/utilities. This gives us an organization like: . +-- .. |-- (Jekyll files) |-- docs |-- ui-components | |-- index.md (parent page) | |-- buttons.md | |-- code.md | |-- labels.md | |-- tables.md | +-- typography.md | |-- utilities | |-- index.md (parent page) | |-- color.md | |-- layout.md | |-- responsive-modifiers.md | +-- typography.md | |-- (other md files, pages with no children) | +-- .. |-- (Jekyll files) +-- .. On the parent pages, add this YAML front matter parameter: . | has_children: true (tells us that this is a parent page) | . Example (parent pages) . --- layout: default title: UI Components nav_order: 2 has_children: true --- . Here we’re setting up the UI Components landing page that is available at /docs/ui-components, which has children and is ordered second in the main nav. Child pages . On child pages, simply set the parent: YAML front matter to whatever the parent’s page title is and set a nav order (this number is now scoped within the section). Example (child pages) . --- layout: default title: Buttons parent: UI Components nav_order: 2 --- . The Buttons page appears as a child of UI Components and appears second in the UI Components section. Ordering child pages . New (v0.4.0) . You can optionally add the following to the YAML front matter to reverse the default sort order of child pages: . | child_nav_order: reversed | . Example (ordering child pages) . --- layout: default title: Reversed Child Pages child_nav_order: reversed --- . Auto-generating Table of Contents . By default, all pages with children will automatically append a Table of Contents which lists the child pages after the parent page’s content. To disable this auto Table of Contents, set has_toc: false in the parent page’s YAML front matter. Example (auto-generating Table of Contents) . --- layout: default title: UI Components nav_order: 2 has_children: true has_toc: false --- . Children with children . Child pages can also have children (grandchildren). This is achieved by using a similar pattern on the child and grandchild pages. | Add the has_children attribute to the child | Add the parent and grand_parent attribute to the grandchild | . Example (children within children) . --- layout: default title: Buttons parent: UI Components nav_order: 2 has_children: true --- . --- layout: default title: Buttons Child Page parent: Buttons grand_parent: UI Components nav_order: 1 --- . This would create the following navigation structure: . +-- .. |-- UI Components |-- .. | |-- Buttons | |-- Button Child Page | |-- .. | +-- .. Currently, the navigation structure is limited to 3 levels: grandchild pages cannot themselves have child pages. ",
    "url": "/docs/navigation-structure/#pages-with-children",
    
    "relUrl": "/docs/navigation-structure/#pages-with-children"
  },"80": {
    "doc": "Navigation Structure",
    "title": "Grouping pages with collections",
    "content": "Pages can also be grouped together by using Jekyll’s and Just the Docs’s collections feature. In contrast to using pages with children, pages grouped by collection are grouped by a shared header (the name of the collection) instead of a page. The nav_fold configuration option works for collection-grouped pages. For more information, please refer to the collections documentation. Example (grouping by collection) . The following example sets up two collections, collection-one and collection-two: . | any document placed within _collection-1/ will be grouped under the Collection One header by default. Since nav_fold is set to true, the pages will be folded by default. | any document placed within _collection-2/ will be grouped under the Collection Two header by default. Since nav_fold is set to false, the pages will be expanded by default. | . _config.yml: collections: collection-one: permalink: \"/:collection/:path/\" output: true collection-two: permalink: \"/:collection/:path/\" output: true just_the_docs: collections: collection-one: name: Collection One nav_fold: true collection-two: name: Collection Two nav_fold: false . ",
    "url": "/docs/navigation-structure/#grouping-pages-with-collections",
    
    "relUrl": "/docs/navigation-structure/#grouping-pages-with-collections"
  },"81": {
    "doc": "Navigation Structure",
    "title": "Auxiliary Links",
    "content": "To add auxiliary links to your site (in the upper right on all pages), add it to the aux_links configuration option in your site’s _config.yml file. Example (auxiliary links) . # Aux links for the upper right navigation aux_links: \"Just the Docs on GitHub\": - \"//github.com/just-the-docs/just-the-docs\" . ",
    "url": "/docs/navigation-structure/#auxiliary-links",
    
    "relUrl": "/docs/navigation-structure/#auxiliary-links"
  },"82": {
    "doc": "Navigation Structure",
    "title": "External Navigation Links",
    "content": "New (v0.4.0) . To add external links to the navigation, add them to the nav_external_links configuration option in your site’s _config.yml file. External links will appear in the navigation after the links to ordinary pages, but before any collections. Example (external navigation links) . # External navigation links nav_external_links: - title: Just the Docs on GitHub url: https://github.com/just-the-docs/just-the-docs hide_icon: false # set to true to hide the external link icon - defaults to false opens_in_new_tab: false # set to true to open this link in a new tab - defaults to false . Opening external links in a new tab . New (unreleased) . The external links are decorated by an icon, which distinguishes them from internal links. You can suppress the icon by setting hide_icon: true. By default, external links are not opened in a new tab. However, this can be enabled by: . | setting opens_in_new_tab: true in the link’s configuration object | setting the configuration option nav_external_links_new_tab: true in _config.yml | . When they conflict, opens_in_new_tab takes precedence. ",
    "url": "/docs/navigation-structure/#external-navigation-links",
    
    "relUrl": "/docs/navigation-structure/#external-navigation-links"
  },"83": {
    "doc": "Navigation Structure",
    "title": "In-page navigation with Table of Contents",
    "content": "To generate a Table of Contents on your docs pages, you can use the {:toc} method from Kramdown, immediately after an &lt;ol&gt; in Markdown. This will automatically generate an ordered list of anchor links to various sections of the page based on headings and heading levels. There may be occasions where you’re using a heading and you don’t want it to show up in the TOC, so to skip a particular heading use the {: .no_toc } CSS class. Example (in-page navigation with Table of Contents) . # Navigation Structure {: .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} . This example skips the page name heading (#) from the TOC, as well as the heading for the Table of Contents itself (##) because it is redundant, followed by the table of contents itself. To get an unordered list, replace 1. TOC above by - TOC. Collapsible Table of Contents . The Table of Contents can be made collapsible using the &lt;details&gt; and &lt;summary&gt; elements, as in the following example. The attribute open (expands the Table of Contents by default) and the styling with {: .text-delta } are optional. &lt;details open markdown=\"block\"&gt; &lt;summary&gt; &lt;/summary&gt; {: .text-delta } 1. TOC {:toc} &lt;/details&gt; . The result is shown at the top of this page ({:toc} can be used only once on each page). ",
    "url": "/docs/navigation-structure/#in-page-navigation-with-table-of-contents",
    
    "relUrl": "/docs/navigation-structure/#in-page-navigation-with-table-of-contents"
  },"84": {
    "doc": "Responsive Modifiers",
    "title": "Responsive modifiers",
    "content": "Just the Docs spacing works in conjunction with a variety of modifiers that allow you to target specific screen sizes responsively. Use these in conjunction with spacing and display prefix and suffix classes. | Modifier | Screen size | . | (none) | All screens until the next modifier | . | xs | 320px (20rem) and up | . | sm | 500px (31.25rem) and up | . | md | 740px (46.25rem) and up | . | lg | 1120px (70rem) and up | . | xl | 1400px (87.5rem) and up | . ",
    "url": "/docs/utilities/responsive-modifiers/#responsive-modifiers",
    
    "relUrl": "/docs/utilities/responsive-modifiers/#responsive-modifiers"
  },"85": {
    "doc": "Responsive Modifiers",
    "title": "Responsive Modifiers",
    "content": " ",
    "url": "/docs/utilities/responsive-modifiers/",
    
    "relUrl": "/docs/utilities/responsive-modifiers/"
  },"86": {
    "doc": "Search",
    "title": "Search",
    "content": " ",
    "url": "/docs/search/",
    
    "relUrl": "/docs/search/"
  },"87": {
    "doc": "Search",
    "title": "Table of contents",
    "content": ". | Enable search in configuration . | Search granularity | Search previews | Search tokenizer | Display URL in search results | Display search button | . | Hiding pages from search . | Example | . | Generate search index when used as a gem | Custom content for search index . | Example | . | . Just the Docs uses lunr.js to add a client-side search interface powered by a JSON index that Jekyll generates. All search results are shown in an auto-complete style interface (there is no search results page). By default, all generated HTML pages are indexed using the following data points: . | Page title | Page content | Page URL | . ",
    "url": "/docs/search/#table-of-contents",
    
    "relUrl": "/docs/search/#table-of-contents"
  },"88": {
    "doc": "Search",
    "title": "Enable search in configuration",
    "content": "In your site’s _config.yml, enable search: . # Enable or disable the site search # Supports true (default) or false search_enabled: true . Search granularity . Pages are split into sections that can be searched individually. The sections are defined by the headings on the page. Each section is displayed in a separate search result. # Split pages into sections that can be searched individually # Supports 1 - 6, default: 2 search.heading_level: 2 . Search previews . A search result can contain previews that show where the search words are found in the specific section. # Maximum amount of previews per search result # Default: 3 search.previews: 3 # Maximum amount of words to display before a matched word in the preview # Default: 5 search.preview_words_before: 5 # Maximum amount of words to display after a matched word in the preview # Default: 10 search.preview_words_after: 10 . Search tokenizer . The default is for hyphens to separate tokens in search terms: gem-based is equivalent to gem based, matching either word. To allow search for hyphenated words: . # Set the search token separator # Default: /[\\s\\-/]+/ # Example: enable support for hyphenated search words search.tokenizer_separator: /[\\s/]+/ . Display URL in search results . # Display the relative url in search results # Supports true (default) or false search.rel_url: false . Display search button . The search button displays in the bottom right corner of the screen and triggers the search input when clicked. # Enable or disable the search button that appears in the bottom right corner of every page # Supports true or false (default) search.button: true . ",
    "url": "/docs/search/#enable-search-in-configuration",
    
    "relUrl": "/docs/search/#enable-search-in-configuration"
  },"89": {
    "doc": "Search",
    "title": "Hiding pages from search",
    "content": "Sometimes you might have a page that you don’t want to be indexed for the search nor to show up in search results, e.g., a 404 page. To exclude a page from search, add the search_exclude: true parameter to the page’s YAML front matter: . Example . --- layout: default title: Page not found nav_exclude: true search_exclude: true --- . ",
    "url": "/docs/search/#hiding-pages-from-search",
    
    "relUrl": "/docs/search/#hiding-pages-from-search"
  },"90": {
    "doc": "Search",
    "title": "Generate search index when used as a gem",
    "content": "If you use Just the Docs as a remote theme, you do not need the following steps. If you use the theme as a gem, you must initialize the search by running this rake command that comes with just-the-docs: . $ bundle exec just-the-docs rake search:init . This command creates the assets/js/zzzz-search-data.json file that Jekyll uses to create your search index. Alternatively, you can create the file manually with this content. ",
    "url": "/docs/search/#generate-search-index-when-used-as-a-gem",
    
    "relUrl": "/docs/search/#generate-search-index-when-used-as-a-gem"
  },"91": {
    "doc": "Search",
    "title": "Custom content for search index",
    "content": "New (v0.4.0) . Advanced . By default, the search feature indexes a page’s .content, .title, and some headers within the .content. Other data (e.g. front matter, files in _data and assets) is not indexed. Users can customize what is indexed. Customizing search indices is an advanced feature that requires Javascript and Liquid knowledge. | When Just the Docs is a local or gem theme, ensure assets/js/zzzz-search-data.json is up-to-date with Generate search index when used as a gem. | Add a new file named _includes/lunr/custom-data.json. Insert custom Liquid code that reads your data (e.g. the page object at include.page) then generates custom Javascript fields that hold the custom data you want to index. Verify these fields in the generated assets/js/search-data.json. | Add a new file named _includes/lunr/custom-index.js. Insert custom Javascript code that reads your custom Javascript fields and inserts them into the search index. You may want to inspect assets/js/just-the-docs.js to better understand the code. | . Example . This example adds front matter usage and examples fields to the search index. _includes/lunr/custom-data.json custom code reads the page usage and examples fields, normalizes the text, and writes the text to custom Javascript myusage and myexamples fields. Javascript fields are similar yet not the same as JSON. jsonify will probably work for most scenarios. {%- capture newline %} {% endcapture -%} \"myusage\": {{ include.page.usage | markdownify | replace:newline,' ' | strip_html | normalize_whitespace | strip | jsonify }}, \"myexamples\": {{ include.page.examples | markdownify | replace:newline,' ' | strip_html | normalize_whitespace | strip | jsonify }}, . _includes/lunr/custom-index.js custom code is inserted into the Javascript loop of assets/js/just-the-docs.js. All custom Javascript fields are accessed as fields of docs[i] such as docs[i].myusage. Finally, append your custom fields on to the already existing docs[i].content. const content_to_merge = [docs[i].content, docs[i].myusage, docs[i].myexamples]; docs[i].content = content_to_merge.join(' '); . ",
    "url": "/docs/search/#custom-content-for-search-index",
    
    "relUrl": "/docs/search/#custom-content-for-search-index"
  },"92": {
    "doc": "Tables",
    "title": "Tables",
    "content": "Tables are responsive by default, allowing wide tables to have a horizontal scroll to access columns outside of the normal viewport. | head1 | head two | three | . | ok | good swedish fish | nice | . | out of stock | good and plenty | nice | . | ok | good oreos | hmm | . | ok | good zoute drop | yumm | . | head1 | head two | three |:-------------|:------------------|:------| ok | good swedish fish | nice | out of stock | good and plenty | nice | ok | good `oreos` | hmm | ok | good `zoute` drop | yumm | . ",
    "url": "/docs/ui-components/tables/",
    
    "relUrl": "/docs/ui-components/tables/"
  },"93": {
    "doc": "Typography",
    "title": "Typography Utilities",
    "content": " ",
    "url": "/docs/utilities/typography/#typography-utilities",
    
    "relUrl": "/docs/utilities/typography/#typography-utilities"
  },"94": {
    "doc": "Typography",
    "title": "Table of contents",
    "content": ". | Font size | Font weight | Line height | Text justification | . ",
    "url": "/docs/utilities/typography/#table-of-contents",
    
    "relUrl": "/docs/utilities/typography/#table-of-contents"
  },"95": {
    "doc": "Typography",
    "title": "Font size",
    "content": "Use the .fs-1 - .fs-10 to set an explicit font-size. | Class | Small screen size font-size | Large screen size font-size | . | .fs-1 | 9px | 10px | . | .fs-2 | 11px | 12px | . | .fs-3 | 12px | 14px | . | .fs-4 | 14px | 16px | . | .fs-5 | 16px | 18px | . | .fs-6 | 18px | 24px | . | .fs-7 | 24px | 32px | . | .fs-8 | 32px | 38px | . | .fs-9 | 38px | 42px | . | .fs-10 | 42px | 48px | . Font size 1 . Font size 2 . Font size 3 . Font size 4 . Font size 5 . Font size 6 . Font size 7 . Font size 8 . Font size 9 . Font size 10 . In Markdown, use the `{: }` wrapper to apply custom classes: Font size 1 {: .fs-1 } Font size 2 {: .fs-2 } Font size 3 {: .fs-3 } Font size 4 {: .fs-4 } Font size 5 {: .fs-5 } Font size 6 {: .fs-6 } Font size 7 {: .fs-7 } Font size 8 {: .fs-8 } Font size 9 {: .fs-9 } Font size 10 {: .fs-10 } . ",
    "url": "/docs/utilities/typography/#font-size",
    
    "relUrl": "/docs/utilities/typography/#font-size"
  },"96": {
    "doc": "Typography",
    "title": "Font weight",
    "content": "Use the .fw-300 - .fw-700 to set an explicit font-weight. Font weight 300 . Font weight 400 . Font weight 500 . Font weight 700 . In Markdown, use the `{: }` wrapper to apply custom classes: Font weight 300 {: .fw-300 } Font weight 400 {: .fw-400 } Font weight 500 {: .fw-500 } Font weight 700 {: .fw-700 } . ",
    "url": "/docs/utilities/typography/#font-weight",
    
    "relUrl": "/docs/utilities/typography/#font-weight"
  },"97": {
    "doc": "Typography",
    "title": "Line height",
    "content": "Use the lh- classes to explicitly apply line height to text. | Class | line-height value | Notes | . | .lh-0 | 0 |   | . | .lh-tight | 1.1 | Default for headings | . | .lh-default | 1.4 | Default for body (paragraphs) | . No Line height No Line height . Tight line height Tight line height . Default line height Default line height . In Markdown, use the `{: }` wrapper to apply custom classes: No Line height No Line height {: .lh-0 } Tight line height Tight line height {: .lh-tight } Default line height Default line height {: .fh-default } . ",
    "url": "/docs/utilities/typography/#line-height",
    
    "relUrl": "/docs/utilities/typography/#line-height"
  },"98": {
    "doc": "Typography",
    "title": "Text justification",
    "content": "By default text is justified left. Use these text- classes to override settings: . | Class | What it does | . | .text-left | text-align: left | . | .text-right | text-align: right | . | .text-center | text-align: center | . ",
    "url": "/docs/utilities/typography/#text-justification",
    
    "relUrl": "/docs/utilities/typography/#text-justification"
  },"99": {
    "doc": "Typography",
    "title": "Typography",
    "content": " ",
    "url": "/docs/utilities/typography/",
    
    "relUrl": "/docs/utilities/typography/"
  },"100": {
    "doc": "Typography",
    "title": "Typography",
    "content": " ",
    "url": "/docs/ui-components/typography/",
    
    "relUrl": "/docs/ui-components/typography/"
  },"101": {
    "doc": "Typography",
    "title": "Table of contents",
    "content": ". | Font stack | Responsive type scale | Headings | Body text | Inline elements | Typographic Utilities | . ",
    "url": "/docs/ui-components/typography/#table-of-contents",
    
    "relUrl": "/docs/ui-components/typography/#table-of-contents"
  },"102": {
    "doc": "Typography",
    "title": "Font stack",
    "content": "By default, Just the Docs uses a native system font stack for sans-serif fonts: . system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif, \"Segoe UI Emoji\" . ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz . For monospace type, like code snippets or the &lt;pre&gt; element, Just the Docs uses a native system font stack for monospace fonts: . \"SFMono-Regular\", Menlo, Consolas, Monospace . ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz . ",
    "url": "/docs/ui-components/typography/#font-stack",
    
    "relUrl": "/docs/ui-components/typography/#font-stack"
  },"103": {
    "doc": "Typography",
    "title": "Responsive type scale",
    "content": "Just the Docs uses a responsive type scale that shifts depending on the viewport size. | Selector | Small screen size font-size | Large screen size font-size | . | h1, .text-alpha | 32px | 36px | . | h2, .text-beta | 18px | 24px | . | h3, .text-gamma | 16px | 18px | . | h4, .text-delta | 14px | 16px | . | h5, .text-epsilon | 16px | 18px | . | h6, .text-zeta | 18px | 24px | . | body | 14px | 16px | . ",
    "url": "/docs/ui-components/typography/#responsive-type-scale",
    
    "relUrl": "/docs/ui-components/typography/#responsive-type-scale"
  },"104": {
    "doc": "Typography",
    "title": "Headings",
    "content": "Headings are rendered like this: . ",
    "url": "/docs/ui-components/typography/#headings",
    
    "relUrl": "/docs/ui-components/typography/#headings"
  },"105": {
    "doc": "Typography",
    "title": "Heading 1",
    "content": " ",
    "url": "/docs/ui-components/typography/",
    
    "relUrl": "/docs/ui-components/typography/"
  },"106": {
    "doc": "Typography",
    "title": "Heading 2",
    "content": "Heading 3 . Heading 4 . Heading 5 . Heading 6 . # Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ##### Heading 5 ###### Heading 6 . ",
    "url": "/docs/ui-components/typography/",
    
    "relUrl": "/docs/ui-components/typography/"
  },"107": {
    "doc": "Typography",
    "title": "Body text",
    "content": "Default body text is rendered like this: . Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. ",
    "url": "/docs/ui-components/typography/#body-text",
    
    "relUrl": "/docs/ui-components/typography/#body-text"
  },"108": {
    "doc": "Typography",
    "title": "Inline elements",
    "content": "Text can be bold, italic, or strikethrough. Link to another page. Text can be **bold**, _italic_, or ~~strikethrough~~. [Link to another page](/). ",
    "url": "/docs/ui-components/typography/#inline-elements",
    
    "relUrl": "/docs/ui-components/typography/#inline-elements"
  },"109": {
    "doc": "Typography",
    "title": "Typographic Utilities",
    "content": "There are a number of specific typographic CSS classes that allow you to override default styling for font size, font weight, line height, and capitalization. View typography utilities . ",
    "url": "/docs/ui-components/typography/#typographic-utilities",
    
    "relUrl": "/docs/ui-components/typography/#typographic-utilities"
  },"110": {
    "doc": "UI Components",
    "title": "UI Components",
    "content": "To make it as easy as possible to write documentation in plain Markdown, most UI components are styled using default Markdown elements with few additional CSS classes needed. ",
    "url": "/docs/ui-components",
    
    "relUrl": "/docs/ui-components"
  },"111": {
    "doc": "Utilities",
    "title": "Utilities",
    "content": "CSS utility classes come in handy when you want to override default styles to create additional whitespace (margins/padding), correct unexpected shifts in font size or weight, add color, or hide (or show) something at a specific screen size. ",
    "url": "/docs/utilities",
    
    "relUrl": "/docs/utilities"
  }
}
